- sort 함수 없이 정렬하기
ar=[100,-2,-14,25,7,3,5,109]
# ar.sort()
# print(ar)
for i in range(0,len(ar)) :
    for j in range(0,len(ar)) :
        if ar[i] < ar[j] :
            ar[i], ar[j] = ar[j], ar[i]
            print (ar)

- list == string (문자열)

- 거꾸로 인덱스
str="Hello World"
print(str[-3:]) -> rld

- Tuple(튜플) - (only 파이썬) : list[], Tuple()
Create/Read 가능 -> 인덱스 사용
Update/Delete 불가능
값 바꾸기 할 때.
여러개의 함수의 반환값을 사용할 때.

ex)
t1=(1,2,3,4,5,6)
t2=1,2,3,4,5,6 -> (1,2,3,4,5,6)

- Set(세트, 집합) :
Create/Read 가능
Update/Delete 불가능
값의 중복 불허
인덱스 없음
중복 데이터 제거
for문 이용 가능, but 인덱스 사용불가.

ex)
s1 = {1,2,3,4,2,3,1} -> {1,2,3,4}

- Dictionary (사전) :
CRUD 가능
인덱스가 없다, 대신 'key'사용
key: value (정수, 실수, 문자열만 가능)

ex) key-value couple
d1={'name':'John','age':25, 'birthday':'1225', 'mobile':'44445555', 'grade':4, 'math':96, 'english':72, 'korean':100}
-> {'name': 'John', 'age': 25, 'birthday': '1225', 'mobile': '44445555', 'grade': 4, 'math': 96, 'english': 72, 'korean': 100}
print(d1['name']) -> John
d1['age']=27
print(d1['age']) -> 27 # 값 변경
d1['city']='Seoul' # 맨뒤에 추가
del d1['name'] # 삭제
for i in d1 :
  print(i)	-> 키만 나옴.
for i in d1 :
  print(d1[i])  -> 키의 값만 나옴.
for x, y in d1.items() :
  print(f 'key [{x}] value [{y}]') -> 키와 키 값이 나옴.

	List	Tuple	Set	Dictionary
C	V[]	V()	V{}	V{k:v}
R	V	V	V	V
U	V			V
D	V
Index	V	V		
	for i in List/Tuple/Set:	for x,y in d1.items():

ex)
name=input("학생이름을 입력하시오\n")
st = {}
i=0
while name != "":
    math=input("수학성적을 입력하시오\n")
    Student={'name':name, "math":math}
    st[i]=Student
    i += 1
    name=input("학생이름을 입력하시오\n")
for j in range(0,len(st)) :
    x = st[j]['name']
    y = st[j]['math']
    print(f'학생 이름은 {x}, 수학 성적은 {y}')

ex2)
student = []
name = input("이름을 입력: \n")
while name != "":
    math=int(input('수학점수 입력: \n'))
    dPerson={'name':name, 'math':math}
    student.append(dPerson)
    name = input("이름을 입력: \n")
for dPerson in student :
    print(dPerson['name'],dPerson['math'])

- 파일 입출력(open/close)
3가지 mode :
read only 
write only : 기존 내용을 다 지워버리고 새로 쓴다. - w
append : 기존 내용 뒤에 추가로 작성한다. - a

f = open(파일의 위치와 이름, 'r'/'w'/'a')
f.read()/f.readline() - r
f.write()/f.writelines() - w/a

open() : 파일이 존재하지 않으면, 새로 만들고 연다. 파일이 존재하면, 연다.

ex)
f=open('D:\AI_Class\Menu.txt','a')
name=input('메뉴 이름을 입력해주세요.\n')

while name != '' :
    price=input('가격을 입력해주세요.\n')
    f.write(name+','+str(price) + '\n')
    name=input('메뉴 이름을 입력해주세요.\n')
f.close()

f=open('D:\AI_Class\Menu.txt','r')
line=f.readline()

while line != '':
    print(line,end="")
    line=f.readline()
f.close

ex2)
Menu=[]
f=open('D:\AI_Class\Menu.txt','r')
line=f.readline()
while line !='':
    ar=line.split(',')
    d1={'menu':ar[0], 'price':int(ar[1])}
    Menu.append(d1)
    line=f.readline()
f.close
ndx=1
for d1 in Menu:
    print('%2d %-15s %4d원'%(ndx,d1['menu'],d1['price']))
    ndx += 1
f.close

- 함수:
반복되는 코드를 한 곳에 모아서 호출만으로 반복 실행하기 위해서 사용.
<자바: function 함수명(매개변수n) {실행문n} datatype 함수명(datatype 매개변수n) {실행문n} 
	void 함수명 (datatype 매개변수n) {실행문n} >
파이썬:
def 함수명(매개변수n):
  실행문

def 함수명(매개변수n):
  실행문
  return 반환값

def 함수명(매개변수n):
  실행문
  if 조건:
    return

매개변수: 외부 data -> 내부
return: 외부 <- 내부 data

지역변수(local Variable): 하나의 변수 내에서만 사용
전역변수(global variable): 모든 변수 내에서 사용

ex)
def printData():
    for i in range (2,10):
        for j in range(1,10):
            print(f'{i} x {j} = {i*j}')
printData()

★
반환값 있는 함수			반환값 없는 함수
function(자바)			procedure(자바)
def f1(a,b):			def f2(a,b):
return 반환값/표현식		(생략가능) if 조건: return else: ...f2(x,y)
x=f1(x,y)				x=f2(x,y) -> 에러. 호출만 가능(추가 불가)

ex 반환값 있는 함수)
def multi(x,y):
    str=f'{x} x {y} = {x*y}'
    return str

for i in range(2,10) :
    for j in range(1,10) :
        retstr=multi(i,j)
        print(retstr)

ex 반환값 없는 함수)
def mutli(x,y):
    str=f'{x} X {y} = {x*y}'
    print(str)

for i in range(2,10):
    for j in range(1,10):
        mutli(i,j)