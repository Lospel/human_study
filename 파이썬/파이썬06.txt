파이썬 머신러닝 판다스 데이터 분석02
ex)
import numpy as np
import pandas as pd

a = np.array([1,3,5,7,9]) => [1 3 5 7 9]

b = pd.dataFrame()

a = np.array([1,2,3]) => [1 2 3]

a*3 => [3 6 9]

넘파이는 수식 계산용.
판다스는 수식 분석용.

-Tensorflow
result = model.predict([3, 4])

a=np.array([[1,2,3,4],[5,6,7,8],[9,10,11,12]])
a.shape = (6,2) #튜플 (행 열)의 형태로 변환.
print(a) =>
[[ 1  2]
 [ 3  4]
 [ 5  6]
 [ 7  8]
 [ 9 10]
 [11 12]]

a=np.array([[[1,2,3],[4,5,6]],
           [[7,8,9],[10,11,12]],
           [[13,14,15],[16,17,18]]]) # (3,2,3) : (페이지,행,열)
print(a)
a.shape = (2,3,3) # (2,3,3)
print(a) =>
[[[ 1  2  3]
  [ 4  5  6]
  [ 7  8  9]]

 [[10 11 12]
  [13 14 15]
  [16 17 18]]]

- 배열 사칙연산
a=np.array([[1,2,3],[4,5,6],[7,8,9]])
b=np.ones(3,dtype=int) # [1,1,1]
print(a)
print('-'*30)
print(b)
print('-'*30)
print(a+b)
print('-'*30)
print(a-b)
print('-'*30)
print(a*b)
print('-'*30)
print(a/b)
=>
[[1 2 3]
 [4 5 6]
 [7 8 9]]
------------------------------
[1 1 1]
------------------------------
[[ 2  3  4]
 [ 5  6  7]
 [ 8  9 10]]
------------------------------
[[0 1 2]
 [3 4 5]
 [6 7 8]]
------------------------------
[[1 2 3]
 [4 5 6]
 [7 8 9]]
------------------------------
[[1. 2. 3.]
 [4. 5. 6.]
 [7. 8. 9.]]

a=np.array([[1,2,3],[4,5,6],[7,8,9]])
b=np.array([[1,2,3],[1,2,3],[1,2,3]])
print(a*b) =>
[[ 1  4  9]
 [ 4 10 18]
 [ 7 16 27]]

-행렬 사칙연산
a=np.array([[1,2],[3,4]])
b=np.array([[1,3],[2,4]])

ma=np.mat(a)  #배열 array를 행렬로 변환(.mat)
mb=np.mat(b)
print(ma*mb) =>
[[ 5 11]
 [11 25]]

행렬 곱 => 
(a b
 c d)
*
(x y
 z w)
=
(ax+bz ay+bw
cx+dz cy+dw)

a=np.array([[1,2],[3,4]])
b=np.array([[5,6],[7,8]])
c=np.hstack([a,b]) # ->
d=np.vstack([a,b]) 
print(c)
print('-'*30)
print(d) =>
[[1 2 5 6]
 [3 4 7 8]]
------------------------------
[[1 2]
 [3 4]
 [5 6]
 [7 8]]

np.array 형태로 입력받고 결과로 np.array 형태로 출력된다.

equation1=np.poly1d([1,2],True)
print(equation1) =>
   2
1 x - 3 x + 2 = x제곱 - 3x + 2 = (x-1)(x-2)

equation2=np.poly1d([1,2],False)
print(equation2) =>
1 x + 2

-판다스
Anaconda 설치후, Anaconda prompt 실행. > conda create -n 가상환경명
> conda activate 가상환경명 > conda install numpy > conda install pandas
> conda install matplotlib > conda install scipy > conda install scikit-learn
>  jupyter notebook --generate-config

data frame: R -> pandas = data table

list_data=['2019-01-02',3.14,'ABC',100,True]
sr=pd.Series(list_data)
print(sr) =>
0    2019-01-02
1          3.14
2           ABC
3           100
4          True
dtype: object

dict_data={'c0':[1,2,3],'c1':[4,5,6],'c2':[7,8,9],'c3':[10,11,12],'c4':[13,14,15]}
df=pd.DataFrame(dict_data)
print(df) =>
   c0  c1  c2  c3  c4
0   1   4   7  10  13
1   2   5   8  11  14
2   3   6   9  12  15

df=pd.DataFrame([[15,'남','덕영중'], [17,'여','수리중']], 
index=['준서','예은'], #행이름
columns=['나이','성별','학교']) #열이름
print(df) =>
    나이 성별   학교
준서  15  남  덕영중
예은  17  여  수리중

df.rename(index={'1st':'첫째','2nd':'둘째', '3th':'셋째'})
df.rename(columns={'도시':'City','모바일':'Mobile','성별':'Gender'})

df.drop(문자열/리스트 [,axis=0,inplace=True])  
-> axis=0 : 행 삭제, axis=1 : 열 삭제
-> inplace=True 원본에 반영, False : default 원본 미반영
df.drop('2nd')
df.drop(['2nd','3th']) #행(axis=0: default), 열 삭제(axis=1)
df.drop(['모바일','도시'],axis=1)

df.loc[행이름]
df.loc[[행이름1,...,행이름n]]
df.loc[행이름]=[값1,...,값n]
df.iloc[시작인덱스:끝인덱스-1:스텝]
df.iloc[행인덱스,열인덱스]
df.iloc[[행인덱스리스트],[열인덱스리스트]]
df[열이름] = df.열이름
df[[열이름1,....,열이름n]]

df[['모바일','이름']] =>
	모바일	이름
1st	44445555	John
2nd	43215432	Jame
3th	77778888	Jacob
4th	12345432	Johanson

df[열이름]=초기값 : 기존 열이름이면 초기값으로 모두 채운다.(이전값 모두 삭제), 
		새 열이름이면 열을 추가하고 초기값으로 채운다.
df.loc[행이름]=초기값
df.transpose() = df.T : 행 열을 바꿈
df.set_index([열이름1,...,열이름n])
df.reindex([행이름1,...,행이름n], fill_value=값) : 
새 행이름이 이미 존재하면 기존 데이터 값은 유지.
새 행이름이 기존에 없으면, 기존 데이터 값은 삭제된다.
df.sort_index(ascending=False/True) : ascending=False는 내림차순(반대로)

Series 연산
- Series VS 값(숫자) : 시리즈의 모든 원소에 연산(+,-,*,/)을 개별적으로 수행.
- Series VS Series : 같은 키값끼리 연산(+,-,*,/)을 수행. 같은 키값이 없으면 NaN으로 채운다.
		.add(덧셈)/.sub(뺄샘)/.mul(곱셈)/.div(나눗셈) 연산은 같은 키 값이 없으면, 
		fill_value에 지정한 값으로 연산 수행.
DataFrame 연산
- DataFrame VS 값(숫자) : DataFrame의 모든 원소에 연산(+,-,*,/)을 수행.
- DataFrame VS DataFrame : 같은 이름의 행, 같은 이름의 열끼리만 연산(+,-,*,/)을 수행. 다르면 NaN으로 채움.