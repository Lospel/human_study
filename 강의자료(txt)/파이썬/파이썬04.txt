-재귀함수(recursive function) : 함수 안에 자기 자신을 다시 호출.
n! (n factorial) = n * (n-1) * (n-2) * ... * 1
ex)
4! = 4*3*2*1

ex2)
def factorial(n) :
  if n==1 :
    return 1
  else :
    return n*factorial(n-1)

-객체지향 프로그램
(자바)
class Student {
  int grade;
  string name;
  student () {}
  student(int x, string y) {
    this.grade=x;
    this.name=y
}
  void setGrade(int x) {
    this.grade=x;
}
  int getGrade() {
    return this.grade;
}
}
(파이썬)
class 클래스명:
#  def __init__(self):		#생성자, 생성자는 하나만 사용가능하여, 뒤에 생성자 때문에 실행안됨.
#    실행문
  def __init__(self, x, y):	#초기화&멤버변수 생성
    self.grade = x
    self.name = y
  def setGrade(self,x):
    self.grade=x
  def getGrade(self):
    return self.grade
  def setName(self,y):
    self.name=y
  def getName(self):
    return self.name

접근제한자(private/public/default/protected) 없음
필드(멤버변수) 선언 없음
생성자는 오직 하나만 사용할 수 있다.


ex)
class Student:
  def_init_(self):
    pass
  ~
person = Student(3,'John')
person.setName('James')
person.setGrade(4)
print(person.getName())
print(person.getGrade())
l1 = [Student(2,'John'), Student(4,'Smith'), Student(1,'Jane')]

-모듈(Module) => .py
-메소드(Method) => def
from 모듈명 import 메소드명1,...,메소드명n

ex)
from a import a1,a2
from c import c1,c2
def b1():
    print('b1 호출')

if __name__ == "__main__":	#파일이 메인일 떄만 실행되고 참조로 사용시에는 호출이 안됨.
    b1()
    c1()
    a2()
    c2()
    a1()

ex2)
class Menu:
    def buildMenu(self):
        lMenu=[]
        name=input('메뉴명: ')
        while name != '' :
            price=input('가격: ')
            while not price.isnumeric():
                price=input('가격: ')
            price=int(price)
            lMenu.append({'name':name,'price':price})
            name=input('메뉴명: ')
        f=open('D:\AI_Class\menu.txt','a')
        for menu in lMenu:
            f.write(menu['name']+','+str(menu['price'])+'\n')
            print((menu['name']+','+str(menu['price'])))
        f.close()
# 클래스 인스턴스 생성
# buildMenu 호출
Food=Menu()
Food.buildMenu()

-예외처리
(자바)
try{
  실행문n;
} catch(Exception e) {
  실행문;
} finaly {
  실행문;
}

(파이썬)
try:
  실행문n
except Exception(다른이름가능) as e(다른이름가능):	#except 뒤에 값 생략 가능
  실행문
finaly:	#생략가능
  실행문

ex)
try:
    n=int(input('숫자를 입력하시오'))
    x=n**3
    print(x)
except Exception as e:
    print(e)
finally:
    print('program terminated.')

ex2)
n=input('숫자를 입력하시오')
if n.isnumeric ():  #'10' : True, 10: True
    n=int(n)
    x=n**3
    print(x)
else:
    print('숫자가 아닌 값이 입력됐습니다.')
print('program terminated.')

-정규표현식(Regular Expression)
(SQL)
lik '%': 0개 이상 문자
lik '_': 1개 문자

(파이썬)
* : 0개 이상문자.	*son
. : 1개 문자.	t.o
t[o|w]o : too/two 를 찾는 단어.
t[a-z]o : t[a~z]o 를 찾는 단어.

ex)
이메일(문자로 시작, 특수문자x)
[a-z|A-Z] + [a-z|A-Z|0-9|_|$]* @ [a-z|A-Z|0-9] + \.[a-z|A-Z]

(자바스크립트)
rex = /[a-z|A-Z] + [a-z|A-Z|0-9|_|$]* @ [a-z|A-Z|0-9] + \.[a-z|A-Z]/
str ~
if(str.match(rex)) {
  correct email
} else{
  incorrect email
}

