-fibonacci series (피보나치 수열)
-> 0, 1, 1, 2, 3, 5, 8, 13, ...

ex)
a=0 # a=b
b=1 # b=c
c=1
while c <= 10000:
    print(f"{a}, {b}, {c}", end=' / ')
    a=b
    b=c
    c=a+b

-prime number (소수: 1과 자기자신 이외의 숫자로는 나눠지지 않는 수)
-> 2 3 5 7 11 13 17 19 ...

ex)
for i in range(2,1001,1):
    cnt =0
    for j in range(1,i+1):
        if i%j == 0:
            cnt+=1
    if cnt == 2:
        print(f"{i}", end=", ")

ex2)
for i in range(2,100):
  flag=False
  for j in range(2,i):
    if i%j ==0:
      flag=True
      break
  if flag==False:
    print(i)

-array 배열 - 길이고정(자바-array, 단일값) => list 리스트 - 가변.(파이썬-list, 자바스크립트-array, 다중값)
i = a[0]		a[0]=5
a[0]=i		i=a[0] -> i = 5

-primitive data type:
int 정수
float 실수
String 문자열
Boolean True/False

-complex data type:
Array
ArrayList	(자바스크립트-Array, 파이썬-List)
LinkedList
파이썬-Tuple
<CRUD>=> ar=null, ar.push(10), ar.push("Hello"), n=ar[0], ar[0]=15 - 자바

-LIST []
리스트명 = [값1,...,값n]
.append(값) : 리스트 맨뒤에 값을 추가 (자바스크립트 - push)
.remove(값) : 리스트에 있는 맨처음 값을 제거, 리스트 길이도 줄어든다.
del 리스트명[인덱스] : 리스트에서 해당 인덱스 번호를 제거, 리스트 길이도 줄어든다.
.index(값) : '값'의 인덱스 번호를 가져온다. (못찾으면 오류가 뜬다.)
.insert(인덱스, 값) : 인덱스 위치에 값을 끼워넣는다.
.pop() : 리스트 맨 마지막 데이터를 가져오고 리스트 길이는 줄어든다. (=자바)
.count(값) : 리스트 안에 같은 '값'이 몇 개인지 찾는다.
.extend(리스트명) : 리스트를 리스트 뒤에 추가, 원리스트가 연장된다. (데이터가 바뀐다)
.sort() : 리스트의 값들을 (오름차순) 정렬한다.
.reverse() : 리스트를 역순으로 만든다. (정렬X)
len(리스트명) : 리스트의 길이를 구한다.(데이터의 개수)
* : 리스트/문자열 반복
+ : 리스트/문자열 연결, 사용된 리스트 내용은 바뀌지 않는다.

슬라이싱(Slicing) - 부분만 추출 : 
[m:n] 리스트의 인덱스 m부터 n-1위치의 데이터까지 추출
[:n] == [0:n] 처음부터 n-1까지의 데이터 추출
[m:] == m부터 끝까지 데이터 추출
[:] == 리스트의 모든 데이터 추출

